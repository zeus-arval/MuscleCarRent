// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MuscleCarRent.Data;

namespace MuscleCarRent.Migrations
{
    [DbContext(typeof(MuscleCarRentDBContext))]
    [Migration("20210505122726_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MuscleCarRentProject.Data.AccessTypeData", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("AccessType");
                });

            modelBuilder.Entity("MuscleCarRentProject.Data.AccountData", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccessTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankCardID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrivingLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDrivingLicenseValid")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("AccessTypeID");

                    b.HasIndex("BankCardID")
                        .IsUnique()
                        .HasFilter("[BankCardID] IS NOT NULL");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("MuscleCarRentProject.Data.BankCardData", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("CVV")
                        .HasColumnType("smallint");

                    b.Property<string>("CardHolderFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CardNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.ToTable("BankCard");
                });

            modelBuilder.Entity("MuscleCarRentProject.Data.CarData", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<short>("BasePrice")
                        .HasColumnType("smallint");

                    b.Property<int>("BodyType")
                        .HasColumnType("int");

                    b.Property<int>("Brand")
                        .HasColumnType("int");

                    b.Property<int>("CarTypeID")
                        .HasColumnType("int");

                    b.Property<string>("CarTypeID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<string>("DriverID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Engine")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPopular")
                        .HasColumnType("bit");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("NeedDriver")
                        .HasColumnType("bit");

                    b.Property<byte>("NumberOfSeats")
                        .HasColumnType("tinyint");

                    b.Property<short>("Power")
                        .HasColumnType("smallint");

                    b.Property<byte>("PricePerHour")
                        .HasColumnType("tinyint");

                    b.Property<int>("ProductionYear")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<short?>("Surcharge")
                        .HasColumnType("smallint");

                    b.HasKey("ID");

                    b.HasIndex("CarTypeID1");

                    b.HasIndex("DriverID1");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("MuscleCarRentProject.Data.CarTypeData", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RentType")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("CarType");
                });

            modelBuilder.Entity("MuscleCarRentProject.Data.DriverData", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("MuscleCarRentProject.Data.ImageData", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<string>("CarID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("CarID1");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("MuscleCarRentProject.Data.OrderData", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<string>("AccountID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<string>("CarID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("HasBankCard")
                        .HasColumnType("bit");

                    b.Property<byte>("HourAmmount")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RentDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<short>("TotalPrice")
                        .HasColumnType("smallint");

                    b.HasKey("ID");

                    b.HasIndex("AccountID1");

                    b.HasIndex("CarID1");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("MuscleCarRentProject.Data.OrderedDateData", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<string>("CarID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("CarID1");

                    b.ToTable("OrderedDates");
                });

            modelBuilder.Entity("MuscleCarRentProject.Data.PromotionData", b =>
                {
                    b.HasBaseType("MuscleCarRentProject.Data.OrderData");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("PromotionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.ToTable("Promotion");
                });

            modelBuilder.Entity("MuscleCarRentProject.Data.AccountData", b =>
                {
                    b.HasOne("MuscleCarRentProject.Data.AccessTypeData", "AccessType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccessTypeID");

                    b.HasOne("MuscleCarRentProject.Data.BankCardData", "BankCard")
                        .WithOne("Account")
                        .HasForeignKey("MuscleCarRentProject.Data.AccountData", "BankCardID");

                    b.Navigation("AccessType");

                    b.Navigation("BankCard");
                });

            modelBuilder.Entity("MuscleCarRentProject.Data.CarData", b =>
                {
                    b.HasOne("MuscleCarRentProject.Data.CarTypeData", "CarType")
                        .WithMany("Cars")
                        .HasForeignKey("CarTypeID1");

                    b.HasOne("MuscleCarRentProject.Data.DriverData", "Driver")
                        .WithMany("Cars")
                        .HasForeignKey("DriverID1");

                    b.Navigation("CarType");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("MuscleCarRentProject.Data.ImageData", b =>
                {
                    b.HasOne("MuscleCarRentProject.Data.CarData", "Car")
                        .WithMany("Images")
                        .HasForeignKey("CarID1");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("MuscleCarRentProject.Data.OrderData", b =>
                {
                    b.HasOne("MuscleCarRentProject.Data.AccountData", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountID1");

                    b.HasOne("MuscleCarRentProject.Data.CarData", "Car")
                        .WithMany("Orders")
                        .HasForeignKey("CarID1");

                    b.Navigation("Account");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("MuscleCarRentProject.Data.OrderedDateData", b =>
                {
                    b.HasOne("MuscleCarRentProject.Data.CarData", "Car")
                        .WithMany("OrderedDates")
                        .HasForeignKey("CarID1");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("MuscleCarRentProject.Data.PromotionData", b =>
                {
                    b.HasOne("MuscleCarRentProject.Data.OrderData", null)
                        .WithOne()
                        .HasForeignKey("MuscleCarRentProject.Data.PromotionData", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MuscleCarRentProject.Data.AccessTypeData", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("MuscleCarRentProject.Data.AccountData", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MuscleCarRentProject.Data.BankCardData", b =>
                {
                    b.Navigation("Account");
                });

            modelBuilder.Entity("MuscleCarRentProject.Data.CarData", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("OrderedDates");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MuscleCarRentProject.Data.CarTypeData", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("MuscleCarRentProject.Data.DriverData", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
